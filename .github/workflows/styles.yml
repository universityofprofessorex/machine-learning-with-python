# name: Styles

# on: [push, pull_request]

# jobs:
#   # lint_linux:
#   #   name: Lint code (Python ${{ matrix.python-version }})
#   #   runs-on: ${{ matrix.os }}
#   #   strategy:
#   #     matrix:
#   #       os: [ ubuntu-18.04 ]
#   #       python-version: [3.6]
#   #   steps:
#   #     - uses: actions/checkout@v2

#   #     - name: Set up Python
#   #       uses: actions/setup-python@v2
#   #       with:
#   #         python-version: ${{ matrix.python-version }}

#   #     - name: pip cache (linux)
#   #       uses: actions/cache@v2
#   #       if: startsWith(matrix.os, 'ubuntu')
#   #       with:
#   #         path: ~/.cache/pip
#   #         key: test-${{ matrix.os }}-${{ matrix.python-version }}-pip

#   #     - name: Install invoke
#   #       run: |
#   #         pip install invoke==1.5.0
#   #     - uses: actions/cache@v2
#   #       id: cache-dev-deps
#   #       with:
#   #         path: .venv
#   #         key: venv-dev-${{ runner.os }}-py-${{ matrix.python-version }}-invoke-${{ hashFiles('requirements.txt') }}
#   #         # restore-keys - An ordered list of keys to use for restoring the cache if no cache hit occurred for key
#   #         restore-keys: |
#   #           venv-dev-${{ runner.os }}-py-${{ matrix.python-version }}-invoke-
#   #           venv-dev-${{ runner.os }}-py-${{ matrix.python-version }}-
#   #           venv-dev-${{ runner.os }}-py-
#   #           venv-dev-${{ runner.os }}-
#   #     - name: Install dependencies
#   #       if: steps.cache-dev-deps.outputs.cache-hit != 'true'
#   #       run: |
#   #         sudo apt-get update
#   #         sudo apt-get install libjpeg-dev libpng-dev libtiff-dev -y
#   #         sudo apt-get install libgirepository1.0-dev -y
#   #         sudo apt-get install build-essential cmake unzip pkg-config -y
#   #         sudo apt-get install libjasper-dev -y
#   #         sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev -y
#   #         sudo apt-get install libxvidcore-dev libx264-dev -y
#   #         sudo apt-get install libgtk-3-dev -y
#   #         sudo apt-get install libatlas-base-dev gfortran -y
#   #         sudo apt-get install python${{ matrix.python-version }}-dev -y
#   #         python3 -m venv .venv
#   #         source .venv/bin/activate
#   #         pip install --upgrade pip
#   #         pip install -e .
#   #         pip install -r requirements-dev.txt
#   #         pip install -r requirements-test.txt
#   #         pip install -r requirements-doc.txt
#   #     - name: Run linters
#   #       run: |
#   #         source .venv/bin/activate
#   #         ./scripts/lint

#   lint_macos:
#     name: Lint code (Python ${{ matrix.python-version }})
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ macos-latest ]
#         python-version: [3.9]
#     env:
#       MEILI_HTTP_ADDR: 127.0.0.1:7701
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{ matrix.python-version }}


#       # brew unlink gcc@8 gcc@9  # work around for https://github.com/actions/virtual-environments/issues/2391
#       - name: Install packages on MacOS
#         # if: steps.brew-cachee.outputs.cache-hit != 'true'
#         run: |
#             brew update

#             brew install cmake || true  # macos image has cmake installed, but a new version may exist; ignore it if so
#             brew install doxygen || true
#             brew install hdf5 || true
#             brew install pkg-config || true
#             brew install wget || true
#             brew install jpeg || true
#             brew install libpng || true
#             brew install libtiff || true
#             brew install openexr || true
#             brew install eigen || true
#             brew install tbb || true
#             brew install hdf5 || true

#             # pytorch
#             brew install openblas || true
#             brew install libomp || true
#             brew install openmpi || true
#             brew install tcl-tk || true

#             brew install openssl || true
#             brew install readline || true
#             brew install sqlite3 || true
#             brew install xz || true
#             brew install zlib || true

#             # https://techblog.willshouse.com/2013/05/20/brew-install-gnu-stat/
#             brew install coreutils || true
#             brew install findutils || true
#             brew install gnu-tar || true
#             brew install gnu-sed || true
#             brew install gawk || true
#             brew install gnutls || true
#             brew install gnu-getopt || true
#             brew install libmagic || true
#             brew install libffi || true
#             brew install atomicparsley || true
#             brew install tree || true
#             brew install tesseract || true
#             brew install nmap || true

#             # https://github.com/jiaaro/pydub#installation
#             # libav
#             brew install libav || true

#             ####    OR    #####

#             # ffmpeg
#             brew install ffmpeg || true

#       - name: start meilisearch
#         run: |
#           brew install meilisearch || true
#           cp -av ./contrib/homebrew.mxcl.meilisearch.plist /usr/local/Cellar/meilisearch/*/homebrew.mxcl.meilisearch.plist
#           ls -lta /usr/local/Cellar/meilisearch/*/
#           # brew services start meilisearch
#           # meilisearch --http-addr=http://127.0.0.1:7701 &
#           # lsof -i -P | grep -i "listen"
#           # sleep 30

#       - name: Install invoke
#         run: |
#           pip install invoke==1.5.0
#       - name: Install dependencies
#         # if: steps.cache-dev-deps.outputs.cache-hit != 'true'
#         run: |
#           python3 -m venv .venv
#           source .venv/bin/activate
#           pip install --upgrade pip wheel
#           source contrib/compile_exports.sh
#           make install-deps-all
#           pip install -e .
#           tree .venv
#       - name: Setup Meilisearch
#         # if: steps.cache-dev-deps.outputs.cache-hit != 'true'
#         run: |
#           set -x;  brew services run meilisearch; set +x
#           brew services list | grep meilisearch
#           sleep 5
#           cat /usr/local/var/log/meilisearch.log || true

#           curl -i -X POST "http://127.0.0.1:7701/indexes" --data '{ "name": "Memes", "uid": "memes" }' || true
#       - name: Run linters
#         run: |
#           source .venv/bin/activate
#           export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
#           # export PATH=".venv/bin:$PATH"
#           export BETTER_EXCEPTIONS=1
#           echo "$(which stat)"
#           ls -lta /Users/runner/work/machine-learning-with-python/machine-learning-with-python/data/fixtures/00001-gif1-farming.mp4
#           stat -c "%y" /Users/runner/work/machine-learning-with-python/machine-learning-with-python/data/fixtures/00001-gif1-farming.mp4
#           inv ci.pytest -vvvv
#       - name: Upload coverage to Codecov
#         uses: codecov/codecov-action@v1
#         with:
#           token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
#           files: cov.xml # optional
